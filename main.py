# -*- coding: utf-8 -*-
# [–ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π] #
import aiohttp
import asyncio
import aiosqlite
import json
from aiogram import Bot, Dispatcher
from datetime import datetime
from config import *
from babel.dates import format_date

# [–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞] #
bot = Bot(token=telegramToken)
botDispatcher = Dispatcher(bot)
 
async def databaseExecute(query, parameters=()):
    async with aiosqlite.connect(databaseName) as database:
        databaseCursor = await database.cursor()
        await databaseCursor.execute(query, parameters)
        await database.commit()

async def databaseFetchone(query, parameters=()):
    async with aiosqlite.connect(databaseName) as database:
        databaseCursor = await database.cursor()
        await databaseCursor.execute(query, parameters)
        databaseRow = await databaseCursor.fetchone()
        return databaseRow

async def databaseCreate():
    await databaseExecute("""
    CREATE TABLE IF NOT EXISTS botState (
        id INTEGER PRIMARY KEY,
        lastReportTime REAL,
        subscribersCount TEXT
    )
    """)

    if not await databaseFetchone("SELECT * FROM botState WHERE id = 1"):
        await databaseExecute("""
        INSERT INTO botState (id, lastReportTime, subscribersCount)
        VALUES (1, ?, ?)
        """, (datetime.now().timestamp(), json.dumps({group_id: 0 for group_id in vkGroupsID})))

async def getLastReportTime():
    row = await databaseFetchone("SELECT lastReportTime FROM botState WHERE id = 1")
    return datetime.fromtimestamp(row[0])

async def setLastReportTime(time):
    await databaseExecute("UPDATE botState SET lastReportTime = ? WHERE id = 1", (time.timestamp(),))

async def getCountSubscribersPrevious():
    row = await databaseFetchone("SELECT subscribersCount FROM botState WHERE id = 1")
    return json.loads(row[0])

async def setCountSubscribersPrevious(count):
    await databaseExecute("UPDATE botState SET subscribersCount = ? WHERE id = 1", (json.dumps(count),))

async def getGroupStats(group_id):
    await asyncio.sleep(1)
    lastReportTime = await getLastReportTime()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    async with aiohttp.ClientSession() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
        getGroupInfo = await session.get(
            vkAPIUrl + 'groups.getById',
            params={
                'access_token': vkToken,
                'v': vkAPIVersion,
                'group_ids': group_id,
                'fields': 'members_count'
            }
        )
        groupInfo = await getGroupInfo.json()
        
        if 'response' in groupInfo:
            groupName = groupInfo['response'][0]['name']
            numberOfSubscribers = groupInfo['response'][0]['members_count']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            previousSubscribersCount = await getCountSubscribersPrevious()
            currentSubscribersCount = {**previousSubscribersCount, str(group_id): numberOfSubscribers}
            await setCountSubscribersPrevious(currentSubscribersCount)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞
        now = datetime.now()
        postsResponse = await session.get(
            vkAPIUrl + 'wall.get',
            params={
                'access_token': vkToken,
                'v': vkAPIVersion,
                'owner_id': -group_id,
                'count': 100,
                'filter': 'owner',
                'extended': 1
            }
        )
        posts = await postsResponse.json()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ –æ–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ—Å—Ç–æ–≤
        numberOfADPosts = 0
        numberOfPosts = 0
        totalReach = 0

        if 'response' in posts and 'items' in posts['response']:
            for post in posts['response']['items']:
                postDate = datetime.fromtimestamp(post['date'])
                if postDate > lastReportTime:
                    numberOfPosts += 1
                    if post.get('text', '').startswith(specialChar):
                        numberOfADPosts += 1          
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –æ—Ö–≤–∞—Ç–∞
            totalReach = sum(post['views']['count'] for post in posts['response']['items'] if 'views' in post and datetime.fromtimestamp(post['date']) > lastReportTime)
        else:
            print("–û—à–∏–±–∫–∞: –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç API –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'response' –∏–ª–∏ 'items'")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        previousSubscribers = previousSubscribersCount.get(str(group_id), 0)
        newSubscribers = numberOfSubscribers - previousSubscribers

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return groupName, numberOfPosts, newSubscribers, numberOfADPosts, totalReach

async def sendDailyReport():
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É
    tasks = [getGroupStats(group_id) for group_id in vkGroupsID]
    results = await asyncio.gather(*tasks)

    for group_id, result in zip(vkGroupsID, results):
        groupName, groupNewPosts, groupNewSubscribers, groupNewDirectADs, groupCoverage = result
        now = datetime.now()
        reportDate = format_date(now, format="d MMMM", locale=appLocale)
        report_message = (
            f"üîî –û—Ç—á—ë—Ç –ø–æ —Å–æ–æ–±—â–µ—Å—Ç–≤—É ¬´<a href='https://vk.com/public{group_id}'>{groupName}</a>¬ª –∑–∞ <b>{reportDate}</b>\n\n"
            f"‚Ä¢ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {groupNewPosts} –ø–æ—Å—Ç–æ–≤\n"
            f"‚Ä¢ <b>–ü—Ä–æ–¥–∞–Ω–æ:</b> {groupNewDirectADs} –ø—Ä—è–º—ã—Ö —Ä–µ–∫–ª–∞–º\n\n"
            f"üìà <b>+{groupNewSubscribers}</b> –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            f"üìä <b>{groupCoverage}</b> –æ—Ö–≤–∞—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
        )
        await bot.send_message(chat_id=telegramChatID, text=report_message, parse_mode='HTML', disable_web_page_preview=not(webPagePreview))
        await setLastReportTime(now)
        await asyncio.sleep(1)

async def scheduleDailyReport(hour, minute):
    while True:
        now = datetime.now()
        if now.hour == hour and now.minute == minute:
            await sendDailyReport()
            await asyncio.sleep(60)  # –°–ø–∏–º –æ–¥–Ω—É –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É
        else:
            await asyncio.sleep(1)  # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞, —Å–ø–∏–º –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞

async def onStartup():
    with open(imageStart, 'rb') as photo:
        await bot.send_photo(chat_id=telegramChatID, photo=photo, caption=f"<b>{captionImageStart}</b>", parse_mode="HTML")
    for group_id in vkGroupsID:
        _, _, _, _, _ = await getGroupStats(group_id)

async def onShutdown():
    with open(imageStop, 'rb') as photo:
        await bot.send_photo(chat_id=telegramChatID, photo=photo, caption=f"<b>{captionImageStop}</b>", parse_mode="HTML")

async def main():
    await databaseCreate()
    await onStartup()
    asyncio.create_task(scheduleDailyReport(timeHours, timeMinutes))  # –ó–∞–ø—É—Å–∫–∞–µ–º scheduleDailyReport –∫–∞–∫ –∑–∞–¥–∞—á—É

    try:
        while True:
            await asyncio.sleep(1)  # –°–ø–∏–º, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    except KeyboardInterrupt:
        print("–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except asyncio.exceptions.CancelledError:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ CancelledError
    finally:
        await onShutdown()

if __name__ == "__main__":
    asyncio.run(main())